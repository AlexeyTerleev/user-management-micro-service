name: User Management

on:
  pull_request:
    branches: [ "dev" ]

permissions:
  contents: read

env:
  DB: ${{ secrets.DB }}
  AUTH: ${{ secrets.AUTH }}
  REDIS: ${{ secrets.REDIS }}
  AWS: ${{ secrets.AWS }}
  MODE: ${{ secrets.MODE }}
  DB_USER: ${{ secrets.DB_USER }}
  DB_PASS: ${{ secrets.DB_PASS }}
  DB_HOST: ${{ secrets.DB_HOST }}
  DB_PORT: ${{ secrets.DB_PORT }}
  DB_NAME: ${{ secrets.DB_NAME }}
  JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
  JWT_REFRESH_SECRET_KEY: ${{ secrets.JWT_REFRESH_SECRET_KEY }}
  ALGORITHM: ${{ secrets.ALGORITHM }}
  REDIS_HOST: ${{ secrets.REDIS_HOST }}
  REDIS_PORT: ${{ secrets.REDIS_PORT }}
  REDIS_PASS: ${{ secrets.REDIS_PASS }}
  AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

jobs:
  build:

    runs-on: ubuntu-latest

    services:
      test_db:
        image: postgres:12
        env:
          POSTGRES_DB: ${{ env.DB_NAME }}
          POSTGRES_USER: ${{ env.DB_USER }}
          POSTGRES_PASSWORD: ${{ env.DB_PASS }}
        ports:
          - 5432:5432

      redis:
        image: redis:6.2-alpine
        ports:
          - 6379:6379
        env:
          REDIS_HOST: ${{ env.REDIS_HOST }}
          REDIS_PORT: ${{ env.REDIS_PORT }}
          REDIS_PASSWORD: ${{ env.REDIS_PASS }}
      
      localstack:
        image: localstack/localstack
        env:
          DEBUG: ${DEBUG-}
          DOCKER_HOST: unix:///var/run/docker.sock
          SERVICES: s3,ses
          AWS_DEFAULT_REGION: ${{ env.AWS_DEFAULT_REGION }}
          AWS_ACCESS_KEY_ID: ${{ env.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY }}
        ports:
          - "4566:4566"            # LocalStack Gateway
          - "4510-4559:4510-4559"  # external services port range
        volumes:
          - ${LOCALSTACK_VOLUME_DIR:-./volume}:/var/lib/localstack
          - /var/run/docker.sock:/var/run/docker.sock
          - ./aws:/etc/localstack/init/ready.d
      
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
          
      - name: Set up Python 3.10
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"

      - name: Install Poetry
        uses: snok/install-poetry@v1
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry install
          
      - name: Lint
        run: |
          poetry run black .
          poetry run isort .

      - name: TEST
        run: |
          echo ${{env.DB.DB_NAME }}
          echo ${{env.DB_NAME}}
          docker ps

      - name: Migrate
        run: |
          poetry run alembic upgrade head

      - name: Test with pytest
        run: |
          poetry run pytest
