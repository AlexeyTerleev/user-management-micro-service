name: User Management

on:
  pull_request:
    branches: [ "dev" ]

permissions:
  contents: read

env:
  DB: ${{ secrets.DB }}
  AUTH: ${{ secrets.AUTH }}
  REDIS: ${{ secrets.REDIS }}
  AWS: ${{ secrets.AWS }}
  MODE: ${{ secrets.MODE }}
  DB_USER: ${{ secrets.DB_USER }}
  DB_PASS: ${{ secrets.DB_PASS }}
  DB_HOST: ${{ secrets.DB_HOST }}
  DB_PORT: ${{ secrets.DB_PORT }}
  DB_NAME: ${{ secrets.DB_NAME }}
  JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
  JWT_REFRESH_SECRET_KEY: ${{ secrets.JWT_REFRESH_SECRET_KEY }}
  ALGORITHM: ${{ secrets.ALGORITHM }}
  REDIS_HOST: ${{ secrets.REDIS_HOST }}
  REDIS_PORT: ${{ secrets.REDIS_PORT }}
  REDIS_PASS: ${{ secrets.REDIS_PASS }}

jobs:
  build:

    runs-on: ubuntu-latest

    services:
      test_db:
        image: postgres:12
        env:
          POSTGRES_DB: ${{ env.DB_NAME }}
          POSTGRES_USER: ${{ env.DB_USER }}
          POSTGRES_PASSWORD: ${{ env.DB_PASS }}
        ports:
          - 5432:5432

      redis:
        image: redis:6.2-alpine
        ports:
          - 6379:6379
        env:
          REDIS_HOST: ${{ env.REDIS_HOST }}
          REDIS_PORT: ${{ env.REDIS_PORT }}
          REDIS_PASSWORD: ${{ env.REDIS_PASS }}
      
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
          
      - name: Set up Python 3.10
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"

      - name: Install Poetry
        uses: snok/install-poetry@v1
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry install
          
      - name: Lint
        run: |
          poetry run black .
          poetry run isort .

      - name: TES
        run: |
          echo ${{env.DB.DB_NAME }}
          echo ${{env.DB_NAME}}

      - name: Wait
        run: |
          sleep 30
          
      - name: Migrate
        run: |
          poetry run alembic upgrade head

      - name: Test with pytest
        run: |
          docker run --network="host" $registry/my_image bash -c "RAILS_ENV=test rails db:create && RAILS_ENV=test rails db:migrate && rails test"
          poetry run pytest tests/unit_tests
